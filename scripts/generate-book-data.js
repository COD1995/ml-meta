#!/usr/bin/env node
/* ---------------------------------------------------------------
   generate-book-data.js
   ---------------------------------------------------------------
   Creates book-data.js files for books, papers, and math-foundations
   so the browser can render the chapter list without server code.
   ------------------------------------------------------------- */
const fs = require("fs");
const path = require("path");

/* ─── 1. Discover content directories ─────────── */
const projectRoot = path.join(__dirname, "..");

// Handle books structure: books/<book>/chapters/
const booksRoot = path.join(projectRoot, "books");
const bookSlugs = fs.existsSync(booksRoot) 
  ? fs.readdirSync(booksRoot).filter((dir) => fs.statSync(path.join(booksRoot, dir)).isDirectory())
  : [];

bookSlugs.forEach((slug) => buildForBook(slug, path.join(booksRoot, slug, "chapters")));

// Handle papers structure: papers/<category>/
const papersRoot = path.join(projectRoot, "papers");
const paperCategories = fs.existsSync(papersRoot)
  ? fs.readdirSync(papersRoot).filter((dir) => fs.statSync(path.join(papersRoot, dir)).isDirectory())
  : [];

paperCategories.forEach((category) => buildForBook(category, path.join(papersRoot, category)));

// Handle math-foundations structure: math-foundations/<category>/
const mathRoot = path.join(projectRoot, "math-foundations");
const mathCategories = fs.existsSync(mathRoot)
  ? fs.readdirSync(mathRoot).filter((dir) => fs.statSync(path.join(mathRoot, dir)).isDirectory())
  : [];

mathCategories.forEach((category) => buildForBook(category, path.join(mathRoot, category)));

console.log("✓ book-data.js regenerated for", bookSlugs.length + paperCategories.length + mathCategories.length, "content section(s)");

/* ───────────────────────── helpers ──────────────────────────────── */
function buildForBook(slug, chaptersDir) {
  if (!fs.existsSync(chaptersDir)) return;

  /* gather *.html files (ignore index.html) */
  const chapters = fs
    .readdirSync(chaptersDir)
    .filter((f) => f.endsWith(".html") && f !== "index.html")
    .map((f) => ({
      href: f,
      title: getTitle(f, slug),
    }))
    .sort((a, b) =>
      a.title.localeCompare(b.title, undefined, { numeric: true })
    );

  const bookData = {
    title: toTitle(slug), // Algorithms (→ Algorithms)
    chapters,
  };

  const outPath = path.join(chaptersDir, "book-data.js");
  fs.writeFileSync(
    outPath,
    `/* Auto‑generated by scripts/generate-book-data.js – DO NOT EDIT */
window.BOOK_DATA = ${JSON.stringify(bookData, null, 2)};`
  );
}

/* Get title for file - handle numbered chapters vs regular files */
function getTitle(filename, slug) {
  const name = filename.replace(/\.html$/i, "");
  
  // Check if it starts with a number (e.g., "04-paths-in-graphs.html")
  if (/^\d/.test(name)) {
    return fileNameToTitle(filename);
  }
  
  // For non-numbered files, convert dashes to spaces and title case
  return name.replace(/-/g, " ").replace(/\b\w/g, (c) => c.toUpperCase());
}

/* convert "04-paths-in-graphs.html" → "4. Paths In Graphs"          */
function fileNameToTitle(filename) {
  const name = filename.replace(/\.html$/i, "");
  const parts = name.split("-");
  const num = parts.shift();
  const words = parts.map((w) => w[0].toUpperCase() + w.slice(1));
  return `${parseInt(num, 10)}. ${words.join(" ")}`;
}

/* convert "pattern-classification" → "Pattern Classification"       */
function toTitle(slug) {
  return slug.replace(/-/g, " ").replace(/\b\w/g, (c) => c.toUpperCase());
}
